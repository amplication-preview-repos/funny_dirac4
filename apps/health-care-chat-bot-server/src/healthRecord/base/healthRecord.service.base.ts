/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, HealthRecord as PrismaHealthRecord } from "@prisma/client";

export class HealthRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HealthRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.healthRecord.count(args);
  }

  async healthRecords(
    args: Prisma.HealthRecordFindManyArgs
  ): Promise<PrismaHealthRecord[]> {
    return this.prisma.healthRecord.findMany(args);
  }
  async healthRecord(
    args: Prisma.HealthRecordFindUniqueArgs
  ): Promise<PrismaHealthRecord | null> {
    return this.prisma.healthRecord.findUnique(args);
  }
  async createHealthRecord(
    args: Prisma.HealthRecordCreateArgs
  ): Promise<PrismaHealthRecord> {
    return this.prisma.healthRecord.create(args);
  }
  async updateHealthRecord(
    args: Prisma.HealthRecordUpdateArgs
  ): Promise<PrismaHealthRecord> {
    return this.prisma.healthRecord.update(args);
  }
  async deleteHealthRecord(
    args: Prisma.HealthRecordDeleteArgs
  ): Promise<PrismaHealthRecord> {
    return this.prisma.healthRecord.delete(args);
  }
}
